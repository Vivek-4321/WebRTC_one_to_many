<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebRTC Viewer</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      h1 {
        text-align: center;
      }
      .container {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      #remoteVideo {
        width: 100%;
        max-width: 640px;
        border: 1px solid #ccc;
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: #f0f0f0; /* To make video area visible even when no video */
      }
      .status {
        margin-top: 20px;
        padding: 10px;
        border-radius: 4px;
        width: 100%;
        max-width: 640px;
        text-align: center;
      }
      .online {
        background-color: #d4edda;
        color: #155724;
      }
      .offline {
        background-color: #f8d7da;
        color: #721c24;
      }
      .waiting {
        background-color: #fff3cd;
        color: #856404;
      }
      .controls {
        margin-top: 10px;
        margin-bottom: 20px;
      }
      button {
        padding: 8px 16px;
        background-color: #4285f4;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin: 0 5px;
      }
      button:hover {
        background-color: #3367d6;
      }
      #debugInfo {
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        border-radius: 4px;
        font-family: monospace;
        font-size: 12px;
        max-height: 200px;
        overflow-y: auto;
        width: 100%;
        max-width: 640px;
      }
    </style>
  </head>
  <body>
    <h1>WebRTC Viewer</h1>
    <div class="container">
      <video id="remoteVideo" autoplay playsinline></video>
      <div class="controls">
        <button id="refreshButton">Refresh Connection</button>
      </div>
      <div id="status" class="status offline">
        Status: No broadcast available
      </div>
      <div id="debugInfo">Debug information will appear here...</div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const socket = io();

        const remoteVideo = document.getElementById("remoteVideo");
        const statusElement = document.getElementById("status");
        const refreshButton = document.getElementById("refreshButton");
        const debugInfo = document.getElementById("debugInfo");

        let peerConnection;
        let retryCount = 0;
        const MAX_RETRIES = 5;

        // Add debug logging function
        function logDebug(message) {
          const timestamp = new Date().toLocaleTimeString();
          debugInfo.innerHTML += `<div>[${timestamp}] ${message}</div>`;
          debugInfo.scrollTop = debugInfo.scrollHeight;
          console.log(message);
        }

        // Request to view broadcast when page loads
        socket.on("connect", () => {
          logDebug("Connected to server");
          requestBroadcast();
        });

        // Add refresh button handler
        refreshButton.addEventListener("click", () => {
          logDebug("Manually refreshing connection");
          closeConnection();
          requestBroadcast();
        });

        function requestBroadcast() {
          updateStatus("Connecting to broadcast...", "waiting");
          socket.emit("viewer_request");
        }

        function closeConnection() {
          if (peerConnection) {
            logDebug("Closing existing peer connection");
            peerConnection.close();
            peerConnection = null;
          }

          if (remoteVideo.srcObject) {
            logDebug("Stopping all tracks in remote video");
            remoteVideo.srcObject.getTracks().forEach((track) => track.stop());
            remoteVideo.srcObject = null;
          }
        }

        // Set up WebRTC peer connection
        function setupPeerConnection(offer) {
          const configuration = {
            iceServers: [
              {
                urls: "stun:stun.relay.metered.ca:80",
              },
              {
                urls: "turn:global.relay.metered.ca:80",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
              {
                urls: "turn:global.relay.metered.ca:80?transport=tcp",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
              {
                urls: "turn:global.relay.metered.ca:443",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
              {
                urls: "turns:global.relay.metered.ca:443?transport=tcp",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
            ],
          };

          // Close any existing connection
          closeConnection();

          logDebug("Setting up new peer connection");
          peerConnection = new RTCPeerConnection(configuration);

          // Handle incoming tracks
          peerConnection.ontrack = (event) => {
            logDebug(`Received track: ${event.track.kind}`);

            if (!remoteVideo.srcObject) {
              logDebug("Setting new stream to video element");
              remoteVideo.srcObject = new MediaStream();
            }

            // Add this track to the existing stream
            remoteVideo.srcObject.addTrack(event.track);
            logDebug(
              `Video now has ${
                remoteVideo.srcObject.getTracks().length
              } tracks: ${remoteVideo.srcObject
                .getTracks()
                .map((t) => t.kind)
                .join(", ")}`
            );

            updateStatus("Connected to broadcast", "online");
          };

          // ICE candidate handling
          peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
              socket.emit("viewer_ice_candidate", event.candidate);
            }
          };

          // Connection state change
          peerConnection.onconnectionstatechange = (event) => {
            logDebug(
              `Connection state changed to: ${peerConnection.connectionState}`
            );

            if (peerConnection.connectionState === "connected") {
              updateStatus("Connected to broadcast", "online");
            } else if (
              peerConnection.connectionState === "disconnected" ||
              peerConnection.connectionState === "failed"
            ) {
              updateStatus("Broadcast connection lost", "offline");

              // Auto retry for failed connections (with limit)
              if (
                peerConnection.connectionState === "failed" &&
                retryCount < MAX_RETRIES
              ) {
                retryCount++;
                logDebug(
                  `Connection failed. Retry attempt ${retryCount}/${MAX_RETRIES}`
                );
                setTimeout(requestBroadcast, 2000);
              }
            }
          };

          // ICE connection state change
          peerConnection.oniceconnectionstatechange = (event) => {
            logDebug(
              `ICE connection state changed to: ${peerConnection.iceConnectionState}`
            );
          };

          // Set remote description (offer from server)
          peerConnection
            .setRemoteDescription(offer)
            .then(() => {
              logDebug("Remote description set successfully, creating answer");
              return peerConnection.createAnswer();
            })
            .then((answer) => {
              logDebug("Answer created, setting local description");
              return peerConnection.setLocalDescription(answer);
            })
            .then(() => {
              logDebug("Local description set, sending answer to server");
              socket.emit("viewer_answer", peerConnection.localDescription);
            })
            .catch((error) => {
              console.error("Error setting up peer connection:", error);
              logDebug(`Connection error: ${error.message}`);
              updateStatus(`Connection error: ${error.message}`, "offline");
            });
        }

        // Update status message
        function updateStatus(message, className) {
          statusElement.textContent = `Status: ${message}`;
          statusElement.className = `status ${className}`;
        }

        // Socket.io event handlers
        socket.on("broadcaster_connected", () => {
          logDebug("Broadcaster available. Connecting...");
          updateStatus("Broadcaster available. Connecting...", "waiting");
          requestBroadcast();
        });

        socket.on("broadcaster_disconnected", () => {
          logDebug("Broadcaster disconnected");
          updateStatus("Broadcaster disconnected", "offline");
          closeConnection();
        });

        socket.on("no_broadcaster", () => {
          logDebug("No broadcaster available");
          updateStatus(
            "No broadcast available. Waiting for broadcaster...",
            "waiting"
          );
        });

        socket.on("viewer_offer", (description) => {
          logDebug("Received offer from server");
          setupPeerConnection(description);
        });

        socket.on("viewer_ice_candidate", (candidate) => {
          if (peerConnection) {
            logDebug("Received ICE candidate from server");
            peerConnection
              .addIceCandidate(new RTCIceCandidate(candidate))
              .catch((error) => {
                console.error("Error adding ICE candidate:", error);
                logDebug(`Error adding ICE candidate: ${error.message}`);
              });
          }
        });

        socket.on("error", (data) => {
          logDebug(`Server error: ${data.message}`);
          updateStatus(`Error: ${data.message}`, "offline");
        });
      });
    </script>
  </body>
</html> -->


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebRTC Viewer</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      h1 {
        text-align: center;
      }
      .container {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      #remoteVideo {
        width: 100%;
        max-width: 640px;
        border: 1px solid #ccc;
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: #f0f0f0; /* To make video area visible even when no video */
      }
      .status {
        margin-top: 20px;
        padding: 10px;
        border-radius: 4px;
        width: 100%;
        max-width: 640px;
        text-align: center;
      }
      .online {
        background-color: #d4edda;
        color: #155724;
      }
      .offline {
        background-color: #f8d7da;
        color: #721c24;
      }
      .waiting {
        background-color: #fff3cd;
        color: #856404;
      }
      .controls {
        margin-top: 10px;
        margin-bottom: 20px;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
      }
      button {
        padding: 8px 16px;
        background-color: #4285f4;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      button:hover {
        background-color: #3367d6;
      }
      button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }
      .quality-controls {
        margin-top: 10px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        width: 100%;
        max-width: 640px;
        display: none; /* Hidden by default until simulcast is available */
      }
      .quality-controls h3 {
        margin-top: 0;
        margin-bottom: 10px;
        text-align: center;
      }
      .quality-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
      }
      .quality-button {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        background-color: #f0f0f0;
        color: #333;
      }
      .quality-button.active {
        background-color: #4285f4;
        color: white;
      }
      .quality-button:hover:not(.active) {
        background-color: #e0e0e0;
      }
      .stats-container {
        margin-top: 10px;
        width: 100%;
        max-width: 640px;
      }
      #debugInfo {
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        border-radius: 4px;
        font-family: monospace;
        font-size: 12px;
        max-height: 200px;
        overflow-y: auto;
        width: 100%;
      }
      .stats-label {
        display: flex;
        justify-content: space-between;
        font-size: 14px;
        margin-bottom: 5px;
      }
      .stats-progress {
        height: 8px;
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 4px;
        overflow: hidden;
      }
      .stats-bar {
        height: 100%;
        background-color: #4285f4;
        width: 0%;
        transition: width 0.5s ease;
      }
    </style>
  </head>
  <body>
    <h1>WebRTC Viewer</h1>
    <div class="container">
      <video id="remoteVideo" autoplay playsinline></video>
      <div class="controls">
        <button id="refreshButton">Refresh Connection</button>
        <button id="statsToggle">Show/Hide Stats</button>
      </div>
      
      <div id="quality-controls" class="quality-controls">
        <h3>Stream Quality</h3>
        <div class="quality-buttons">
          <button id="auto-quality" class="quality-button active">Auto</button>
          <button id="high-quality" class="quality-button">High</button>
          <button id="medium-quality" class="quality-button">Medium</button>
          <button id="low-quality" class="quality-button">Low</button>
        </div>
      </div>
      
      <div id="status" class="status offline">
        Status: No broadcast available
      </div>
      
      <div class="stats-container">
        <div class="stats-label">
          <span>Bitrate:</span>
          <span id="bitrate-value">0 kbps</span>
        </div>
        <div class="stats-progress">
          <div id="bitrate-bar" class="stats-bar"></div>
        </div>
        
        <div class="stats-label">
          <span>Packet Loss:</span>
          <span id="packet-loss-value">0%</span>
        </div>
        <div class="stats-progress">
          <div id="packet-loss-bar" class="stats-bar"></div>
        </div>
        
        <div class="stats-label">
          <span>Resolution:</span>
          <span id="resolution-value">-</span>
        </div>
        
        <div class="stats-label">
          <span>Current Layer:</span>
          <span id="layer-value">-</span>
        </div>
      </div>
      
      <div id="debugInfo">Debug information will appear here...</div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const socket = io();

        const remoteVideo = document.getElementById("remoteVideo");
        const statusElement = document.getElementById("status");
        const refreshButton = document.getElementById("refreshButton");
        const statsToggle = document.getElementById("statsToggle");
        const debugInfo = document.getElementById("debugInfo");
        const qualityControls = document.getElementById("quality-controls");
        
        // Quality buttons
        const autoQualityBtn = document.getElementById("auto-quality");
        const highQualityBtn = document.getElementById("high-quality");
        const mediumQualityBtn = document.getElementById("medium-quality");
        const lowQualityBtn = document.getElementById("low-quality");
        
        // Stats elements
        const bitrateValue = document.getElementById("bitrate-value");
        const bitrateBar = document.getElementById("bitrate-bar");
        const packetLossValue = document.getElementById("packet-loss-value");
        const packetLossBar = document.getElementById("packet-loss-bar");
        const resolutionValue = document.getElementById("resolution-value");
        const layerValue = document.getElementById("layer-value");

        let peerConnection;
        let retryCount = 0;
        const MAX_RETRIES = 5;
        let statsInterval;
        let simulcastEnabled = false;
        let preferredQuality = "auto"; // Default to auto
        
        // Toggle debug info visibility
        statsToggle.addEventListener("click", () => {
          if (debugInfo.style.display === "none") {
            debugInfo.style.display = "block";
            statsToggle.textContent = "Hide Stats";
          } else {
            debugInfo.style.display = "none";
            statsToggle.textContent = "Show Stats";
          }
        });
        
        // Quality selection
        autoQualityBtn.addEventListener("click", () => setQuality("auto"));
        highQualityBtn.addEventListener("click", () => setQuality("high"));
        mediumQualityBtn.addEventListener("click", () => setQuality("medium"));
        lowQualityBtn.addEventListener("click", () => setQuality("low"));
        
        function setQuality(quality) {
          preferredQuality = quality;
          
          // Update UI
          autoQualityBtn.classList.toggle("active", quality === "auto");
          highQualityBtn.classList.toggle("active", quality === "high");
          mediumQualityBtn.classList.toggle("active", quality === "medium");
          lowQualityBtn.classList.toggle("active", quality === "low");
          
          // Send preference to server
          socket.emit("quality_change", { quality: preferredQuality });
          
          logDebug(`Quality preference set to: ${preferredQuality}`);
        }

        // Add debug logging function
        function logDebug(message) {
          const timestamp = new Date().toLocaleTimeString();
          debugInfo.innerHTML += `<div>[${timestamp}] ${message}</div>`;
          debugInfo.scrollTop = debugInfo.scrollHeight;
          console.log(message);
        }
        
        // Stats collection
        let lastBytesReceived = 0;
        let lastTimestamp = 0;
        let lastPacketsReceived = 0;
        let lastPacketsLost = 0;
        
        function startStatsCollection() {
          if (statsInterval) {
            clearInterval(statsInterval);
          }
          
          statsInterval = setInterval(async () => {
            if (!peerConnection) return;
            
            try {
              const stats = await peerConnection.getStats();
              let videoBitrate = 0;
              let videoPacketLoss = 0;
              let videoWidth = 0;
              let videoHeight = 0;
              let videoFrameRate = 0;
              let currentLayer = "-";
              let totalBytesReceived = 0;
              let packetsLost = 0;
              let packetsReceived = 0;
              let currentTimestamp = Date.now();
              
              // First pass to collect all data
              stats.forEach(stat => {
                if (stat.type === 'inbound-rtp' && stat.kind === 'video') {
                  if (stat.bytesReceived) {
                    totalBytesReceived += stat.bytesReceived;
                  }
                  
                  if (stat.packetsLost !== undefined) {
                    packetsLost += stat.packetsLost;
                  }
                  
                  if (stat.packetsReceived) {
                    packetsReceived += stat.packetsReceived;
                  }
                  
                  // Check for simulcast info
                  if (stat.rid) {
                    currentLayer = stat.rid;
                  }
                } else if (stat.type === 'track' && stat.kind === 'video') {
                  videoWidth = stat.frameWidth;
                  videoHeight = stat.frameHeight;
                  videoFrameRate = Math.round(stat.framesPerSecond);
                } else if (stat.type === 'transport') {
                  // Some implementations provide better stats at transport level
                  if (stat.bytesReceived) {
                    totalBytesReceived = Math.max(totalBytesReceived, stat.bytesReceived);
                  }
                }
              });
              
              // Calculate bitrate if we have previous values
              if (lastBytesReceived > 0 && lastTimestamp > 0) {
                const bytesDelta = totalBytesReceived - lastBytesReceived;
                const timeDeltaMs = currentTimestamp - lastTimestamp;
                
                if (bytesDelta >= 0 && timeDeltaMs > 0) {
                  // Convert to kbps (kilobits per second)
                  videoBitrate = Math.round((bytesDelta * 8) / (timeDeltaMs / 1000) / 1000);
                  
                  // Log to debug
                  logDebug(`Received ${bytesDelta} bytes in ${timeDeltaMs}ms (${videoBitrate} kbps)`);
                }
              }
              
              // Calculate packet loss if we have previous values
              if (lastPacketsReceived > 0 && lastPacketsLost >= 0) {
                const packetsReceivedDelta = packetsReceived - lastPacketsReceived;
                const packetsLostDelta = Math.max(0, packetsLost - lastPacketsLost); // Ensure non-negative
                
                if (packetsReceivedDelta > 0 || packetsLostDelta > 0) {
                  const totalPacketsDelta = packetsReceivedDelta + packetsLostDelta;
                  if (totalPacketsDelta > 0) {
                    videoPacketLoss = (packetsLostDelta / totalPacketsDelta) * 100;
                    
                    // Log to debug
                    logDebug(`Packet loss: ${packetsLostDelta}/${totalPacketsDelta} (${videoPacketLoss.toFixed(1)}%)`);
                  }
                }
              }
              
              // Store current values for next calculation
              lastBytesReceived = totalBytesReceived;
              lastTimestamp = currentTimestamp;
              lastPacketsReceived = packetsReceived;
              lastPacketsLost = packetsLost;
              
              // Update stats display
              bitrateValue.textContent = `${videoBitrate} kbps`;
              bitrateBar.style.width = `${Math.min(videoBitrate / 50, 100)}%`; // Scale to reasonable max
              
              packetLossValue.textContent = `${videoPacketLoss.toFixed(1)}%`;
              packetLossBar.style.width = `${Math.min(videoPacketLoss * 10, 100)}%`; // Scale for visibility
              
              if (videoWidth && videoHeight) {
                resolutionValue.textContent = `${videoWidth}x${videoHeight} @ ${videoFrameRate || 0}fps`;
              }
              
              layerValue.textContent = currentLayer;
              
            } catch (error) {
              console.error("Error collecting stats:", error);
            }
          }, 1000);
        }

        // Request to view broadcast when page loads
        socket.on("connect", () => {
          logDebug("Connected to server");
          requestBroadcast();
        });

        // Add refresh button handler
        refreshButton.addEventListener("click", () => {
          logDebug("Manually refreshing connection");
          closeConnection();
          requestBroadcast();
        });

        function requestBroadcast() {
          updateStatus("Connecting to broadcast...", "waiting");
          socket.emit("viewer_request", { preferredQuality });
        }

        function closeConnection() {
          if (statsInterval) {
            clearInterval(statsInterval);
            statsInterval = null;
          }
          
          if (peerConnection) {
            logDebug("Closing existing peer connection");
            peerConnection.close();
            peerConnection = null;
          }

          if (remoteVideo.srcObject) {
            logDebug("Stopping all tracks in remote video");
            remoteVideo.srcObject.getTracks().forEach((track) => track.stop());
            remoteVideo.srcObject = null;
          }
        }

        // Set up WebRTC peer connection
        function setupPeerConnection(offer) {
          const configuration = {
            iceServers: [
              {
                urls: "stun:stun.relay.metered.ca:80",
              },
              {
                urls: "turn:global.relay.metered.ca:80",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
              {
                urls: "turn:global.relay.metered.ca:80?transport=tcp",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
              {
                urls: "turn:global.relay.metered.ca:443",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
              {
                urls: "turns:global.relay.metered.ca:443?transport=tcp",
                username: "f5baae95181d1a3b2947f791",
                credential: "n67tiC1skstIO4zc",
              },
            ],
          };

          // Close any existing connection
          closeConnection();

          logDebug("Setting up new peer connection");
          peerConnection = new RTCPeerConnection(configuration);

          // Handle incoming tracks
          peerConnection.ontrack = (event) => {
            logDebug(`Received track: ${event.track.kind}`);

            if (!remoteVideo.srcObject) {
              logDebug("Setting new stream to video element");
              remoteVideo.srcObject = new MediaStream();
            }

            // Add this track to the existing stream
            remoteVideo.srcObject.addTrack(event.track);
            logDebug(
              `Video now has ${
                remoteVideo.srcObject.getTracks().length
              } tracks: ${remoteVideo.srcObject
                .getTracks()
                .map((t) => t.kind)
                .join(", ")}`
            );

            updateStatus("Connected to broadcast", "online");
            
            // Start collecting stats
            startStatsCollection();
          };

          // ICE candidate handling
          peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
              socket.emit("viewer_ice_candidate", event.candidate);
            }
          };

          // Connection state change
          peerConnection.onconnectionstatechange = (event) => {
            logDebug(
              `Connection state changed to: ${peerConnection.connectionState}`
            );

            if (peerConnection.connectionState === "connected") {
              updateStatus("Connected to broadcast", "online");
            } else if (
              peerConnection.connectionState === "disconnected" ||
              peerConnection.connectionState === "failed"
            ) {
              updateStatus("Broadcast connection lost", "offline");

              // Auto retry for failed connections (with limit)
              if (
                peerConnection.connectionState === "failed" &&
                retryCount < MAX_RETRIES
              ) {
                retryCount++;
                logDebug(
                  `Connection failed. Retry attempt ${retryCount}/${MAX_RETRIES}`
                );
                setTimeout(requestBroadcast, 2000);
              }
            }
          };

          // ICE connection state change
          peerConnection.oniceconnectionstatechange = (event) => {
            logDebug(
              `ICE connection state changed to: ${peerConnection.iceConnectionState}`
            );
          };

          // Set remote description (offer from server)
          peerConnection
            .setRemoteDescription(offer)
            .then(() => {
              logDebug("Remote description set successfully, creating answer");
              return peerConnection.createAnswer();
            })
            .then((answer) => {
              logDebug("Answer created, setting local description");
              return peerConnection.setLocalDescription(answer);
            })
            .then(() => {
              logDebug("Local description set, sending answer to server");
              socket.emit("viewer_answer", peerConnection.localDescription);
            })
            .catch((error) => {
              console.error("Error setting up peer connection:", error);
              logDebug(`Connection error: ${error.message}`);
              updateStatus(`Connection error: ${error.message}`, "offline");
            });
        }

        // Update status message
        function updateStatus(message, className) {
          statusElement.textContent = `Status: ${message}`;
          statusElement.className = `status ${className}`;
        }

        // Socket.io event handlers
        socket.on("broadcaster_connected", () => {
          logDebug("Broadcaster available. Connecting...");
          updateStatus("Broadcaster available. Connecting...", "waiting");
          requestBroadcast();
        });

        socket.on("broadcaster_disconnected", () => {
          logDebug("Broadcaster disconnected");
          updateStatus("Broadcaster disconnected", "offline");
          closeConnection();
          
          // Hide quality controls when no broadcaster
          qualityControls.style.display = "none";
          simulcastEnabled = false;
        });

        socket.on("no_broadcaster", () => {
          logDebug("No broadcaster available");
          updateStatus(
            "No broadcast available. Waiting for broadcaster...",
            "waiting"
          );
          
          // Hide quality controls when no broadcaster
          qualityControls.style.display = "none";
          simulcastEnabled = false;
        });

        socket.on("viewer_offer", (description) => {
          logDebug("Received offer from server");
          setupPeerConnection(description);
        });

        socket.on("viewer_ice_candidate", (candidate) => {
          if (peerConnection) {
            logDebug("Received ICE candidate from server");
            peerConnection
              .addIceCandidate(new RTCIceCandidate(candidate))
              .catch((error) => {
                console.error("Error adding ICE candidate:", error);
                logDebug(`Error adding ICE candidate: ${error.message}`);
              });
          }
        });
        
        socket.on("simulcast_status", (data) => {
          simulcastEnabled = data.enabled;
          qualityControls.style.display = simulcastEnabled ? "block" : "none";
          
          if (simulcastEnabled) {
            logDebug(`Simulcast enabled with ${data.layers.length} layers`);
            
            // Log details of each layer for debugging
            if (data.layers && data.layers.length > 0) {
              data.layers.forEach(layer => {
                logDebug(`Layer ${layer.rid}: maxBitrate=${layer.maxBitrate/1000}kbps, scale=${layer.scaleResolutionDownBy}x`);
              });
            }
            
            // Set initial quality to auto
            setQuality("auto");
          } else {
            logDebug("Simulcast not available for this broadcast");
          }
        });
        
        socket.on("quality_changed", (data) => {
          logDebug(`Server changed quality to: ${data.quality}`);
          
          // Update UI to match server-selected quality
          autoQualityBtn.classList.toggle("active", data.quality === "auto");
          highQualityBtn.classList.toggle("active", data.quality === "high");
          mediumQualityBtn.classList.toggle("active", data.quality === "medium");
          lowQualityBtn.classList.toggle("active", data.quality === "low");
        });

        socket.on("error", (data) => {
          logDebug(`Server error: ${data.message}`);
          updateStatus(`Error: ${data.message}`, "offline");
        });
      });
    </script>
  </body>
</html>